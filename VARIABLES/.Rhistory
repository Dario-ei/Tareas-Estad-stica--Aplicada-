pmf_teorica <- dnbinom(x_vals, size = r, prob = p)
# Histograma con breaks corregidos
hist(fallos, breaks = (-0.5):(max(fallos)+0.5), freq = FALSE,
xlab = "Número de fallos antes del 8º éxito",
main = paste("Binomial Negativa (r =", r, ", p =", p, ")"),
ylim = c(0, max(pmf_teorica)*1.2), col = "skyblue", border = "white")
# Superponer PMF teórica
points(x_vals, pmf_teorica, type = "b", pch = 19, col = "red", lwd = 2)
legend("topright", legend = c("Empírico (simulación)", "Teórico (pmf)"),
col = c("skyblue", "red"), pch = c(15,19), lty = c(NA,1), bty = "n")
}
simular_binneg <- function(r = 8, p = 0.7, n_sim = 1000, seed = 123) {
set.seed(seed)
# simula numero de fallos antes del r-ésimo éxito
fallos <- rnbinom(n = n_sim, size = r, prob = p)
# estadísticos
mean_emp <- mean(fallos)
var_emp  <- var(fallos)
sd_emp   <- sd(fallos)
mean_theo <- r * (1-p) / p
var_theo  <- r * (1-p) / (p^2)
cat("Parámetros: r =", r, ", p =", p, ", n_sim =", n_sim, "\n")
cat("Media fallos (empírica):", round(mean_emp,6), "\n")
cat("Media fallos (teórica):", round(mean_theo,6), "\n")
cat("Varianza fallos (empírica):", round(var_emp,6), "\n")
cat("Varianza fallos (teórica):", round(var_theo,6), "\n\n")
# tabla de proporciones empíricas
prop_emp <- prop.table(table(fallos))
# pmf teórica en rango observado
max_x <- max(fallos)
x_vals <- 0:max_x
pmf_teo <- dnbinom(x_vals, size = r, prob = p)
# Gráfico (base R) — histograma con breaks que cubren todo el rango
hist(fallos, breaks = (-0.5):(max(fallos)+0.5), freq = FALSE,
xlab = "Número de fallos antes del 8º éxito",
main = paste("Empírico vs Teórico (r=", r, ", p=", p, ")", sep=""),
ylim = c(0, max(pmf_teo, density(fallos)$y)*1.2),
col = "lightgray", border = "white")
points(x_vals, pmf_teo, type = "b", pch = 19, col = "red", lwd = 2)
legend("topright", legend = c("Empírico (hist)", "Teórico (pmf)"),
col = c("lightgray","red"), pch = c(15,19), bty = "n")
# devolver lista con resultados para inspección posterior
invisible(list(fallos = fallos,
mean_emp = mean_emp, mean_theo = mean_theo,
var_emp = var_emp, var_theo = var_theo,
prop_emp = prop_emp,
pmf_teo = data.frame(x = x_vals, pmf = pmf_teo)))
}
# Ejecuta:
# res1 <- simular_binneg(r = 8, p = 0.7, n_sim = 1000, seed = 2025)
# ================================
# a) Modelo con suma de geométricas
# ================================
# La variable "fallos" sigue una Binomial Negativa con parámetros:
# r = 8 (número de éxitos deseados), p = 0.7 (prob de éxito por tiro).
# ================================
# b) Valor esperado teórico
# ================================
r <- 8      # número de éxitos deseados
p <- 0.7    # probabilidad de éxito
esperanza_fallos <- r * (1 - p) / p
var_fallos <- r * (1 - p) / (p^2)
cat("Número esperado de fallos:", round(esperanza_fallos, 4), "\n")
cat("Varianza teórica:", round(var_fallos, 4), "\n\n")
# ================================
# c) Simulación de 1000 sesiones
# ================================
set.seed(123)
n_sim <- 1000
fallos_sim <- rnbinom(n_sim, size = r, prob = p)
# Estadísticos empíricos
mean_emp <- mean(fallos_sim)
var_emp <- var(fallos_sim)
cat("Media empírica de fallos:", round(mean_emp, 4), "\n")
cat("Varianza empírica:", round(var_emp, 4), "\n\n")
# ================================
# Comparación gráfica
# ================================
max_x <- max(fallos_sim)
x_vals <- 0:max_x
pmf_teorica <- dnbinom(x_vals, size = r, prob = p)
hist(fallos_sim,
breaks = (-0.5):(max(fallos_sim)+0.5), freq = FALSE,
xlab = "Número de fallos antes del 8º acierto",
main = paste("Comparación Binomial Negativa (r =", r, ", p =", p, ")"),
ylim = c(0, max(pmf_teorica)*1.2),
col = "skyblue", border = "white")
points(x_vals, pmf_teorica, type = "b", pch = 19, col = "red", lwd = 2)
legend("topright", legend = c("Simulación (empírico)", "Teórico (pmf)"),
col = c("skyblue", "red"), pch = c(15,19), lty = c(NA,1), bty = "n")
r <- 4
p <- 0.3
# a) P(F = 12)
k <- 12
p_k <- dnbinom(k, size = r, prob = p)
cat("P(F = 12) =", round(p_k, 8), "\n")
# b) P(F > 20)
p_le_20 <- pnbinom(20, size = r, prob = p)   # P(F <= 20)
p_gt_20  <- 1 - p_le_20
cat("P(F > 20) =", round(p_gt_20, 8), "\n")
# c) Costo esperado
E_F <- r * (1 - p) / p
costo_por_prueba <- 10000
costo_esperado <- E_F * costo_por_prueba
cat("E[F] =", E_F, "\n")
cat("Costo esperado en fallos = $", round(costo_esperado, 2), "\n")
#| label: setup
#| include: false
library(tidyverse)
library(kableExtra)
library(gridExtra)
p <- 0.5
# a) P(N = 5)
p5 <- dgeom(5-1, prob = p)   # dgeom(k-1) si usamos la parametrización de R (fracasos antes del éxito)
# o directamente: p5 <- (1-p)^(5-1)*p
p5
# b) P(N > 3)
p_gt3 <- (1-p)^3
p_gt3
# alternativa con pnbinom: 1 - pnbinom(3-1, prob = p)  # pnbinom(q) da P(#fracasos <= q)
# c) Media y varianza teóricas
mean_theo <- 1 / p
var_theo  <- (1 - p) / p^2
mean_theo; var_theo
# Simulación para comparar (opcional)
set.seed(123)
n_sim <- 10000
# en R, rgeom genera #fracasos antes del éxito, así que sumamos 1
sim_N <- rgeom(n_sim, prob = p) + 1
mean(sim_N); var(sim_N)
prop.table(table(sim_N))[5]  # proporción empírica de N == 5
mean(sim_N > 3)             # proporción empírica de N > 3
p <- 0.7
k_vals <- 0:5
jugador <- tibble(Tiros =  k_vals,
Probabilidad = dgeom(Tiros, p))
ggplot(jugador)+
geom_col(aes(Tiros, Probabilidad), fill = "#ABE121", alpha = 0.2, color="black")+theme_bw()
esperanza <- (1-p)/p
cat("b) El número de intentos que se espera que necesite para anotar:", esperanza+1)
p <- 0.02
# a) Número esperado de inspecciones
E_N <- 1/p
E_N
# b) Probabilidad de que la primera defectuosa aparezca después de la pieza 100
P_gt100 <- (1-p)^100
P_gt100
# c) Verificación de falta de memoria: ejemplo con m=50, n=20
m <- 50
n <- 20
P_cond <- (1-p)^(m+n) / (1-p)^m
P_n <- (1-p)^n
P_cond; P_n  # deben ser iguales
#| code-fold: true
#| label: limite-central
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Verificación del Teorema del Límite Central"
# Simular medias muestrales
set.seed(456)
k_muestra <- 1000
n_muestra <- 30
medias_muestrales <- replicate(k_muestra, {
muestra <- sample(1:6, n_muestra, replace = TRUE)
mean(muestra)
})
# Crear histograma
hist_data <- data.frame(Medias = medias_muestrales)
ggplot(hist_data) +
geom_histogram(aes(x=Medias, after_stat(density)), bins = 30,
fill = "lightblue", alpha = 0.7, color = "black") +
geom_density(aes(x = Medias), color = "red", linewidth = 1) +
geom_vline(xintercept = mean(medias_muestrales),
color = "blue", linetype = "dashed", linewidth = 1) +
labs(title = "Distribución de Medias Muestrales",
subtitle = paste("n =", n_muestra, " de una v.a. uniforme(1,6)"),
x = "Media Muestral",
y = "Densidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# Estadísticas
cat("Media teórica:", (1+6)/2, "\n")
cat("Media observada:", round(mean(medias_muestrales), 4), "\n")
cat("Varianza teórica de la media:", round(((6-1+1)^2-1)/12/n_muestra, 4), "\n")
cat("Varianza observada de la media:", round(var(medias_muestrales), 4), "\n")
library(ggplot2)
library(dplyr)
library(knitr)
library(gridExtra)
library(patchwork)
lambda_min <- 6
# a) P(X = 4) en 1 minuto
dpois(4, lambda = lambda_min)
# b) P(X = 0) en 30 segundos (lambda = 6*0.5)
dpois(0, lambda = lambda_min*0.5)
# c) Número esperado de llamadas en 1 hora (60 min)
lambda_hora <- lambda_min * 60
E_llamadas_hora <- lambda_hora
E_llamadas_hora
# d) P(8 <= X <= 12) en 2 minutos (lambda = 6*2)
lambda_2min <- lambda_min * 2
sum(dpois(8:12, lambda = lambda_2min))
# Parámetros originales
lambda_prod <- 0.015
n <- 500
lambda <- lambda_prod * n
# a) P(X=8)
dpois(8, lambda)
# b) P(X>=10)
1 - ppois(9, lambda)
# c) Número de productos para P(al menos 1 defecto) = 0.95
n_req <- -log(0.05)/lambda_prod
n_req
# d) Nueva tasa: 1.2 defectos por 100 productos
lambda_nuevo <- 500 * 0.012
1 - ppois(9, lambda_nuevo)
lambda <- 2.5
# a) Exactamente 3 pacientes en 1 hora
dpois(3, lambda = lambda * 1)
# b) Ningún paciente en 2 horas
dpois(0, lambda = lambda * 2)
# c) Probabilidad de superar capacidad 8 en 4 horas
lambda4 <- lambda * 4
1 - ppois(8, lambda4)
# d) Capacidad mínima para que P(saturación) < 0.1
qpois(0.9, lambda4)  # devuelve k tal que P(X <= k) >= 0.9
set.seed(123)
# Parámetros
lambda <- 7       # Poisson original
n <- 30           # tamaño de cada muestra
n_sim <- 10000    # número de repeticiones para el TCL
# Paso 1: Simular n_sim promedios de muestras de tamaño n
promedios <- replicate(n_sim, mean(rpois(n, lambda)))
# Paso 2: Estadísticos teóricos del promedio
mu_teo <- lambda
sigma_teo <- sqrt(lambda / n)
cat("Media teórica del promedio:", mu_teo, "\n")
cat("Desviación estándar teórica del promedio:", round(sigma_teo,4), "\n\n")
# Paso 3: Comparación gráfica
hist(promedios, probability = TRUE, breaks = 30,
main = paste("Verificación TCL para Poisson(λ=", lambda, "), n=", n),
xlab = "Promedio muestral", col = "lightblue", border = "white")
# Agregar curva normal teórica
x_vals <- seq(min(promedios), max(promedios), length.out = 200)
lines(x_vals, dnorm(x_vals, mean = mu_teo, sd = sigma_teo), col = "red", lwd = 2)
legend("topright", legend = c("Histograma muestral", "Normal teórica"),
fill = c("lightblue", NA), border = c("white", NA),
lty = c(NA,1), col = c(NA,"red"), lwd=c(NA,2))
# Media y varianza empírica de los promedios
mean(promedios)
var(promedios)
sd(promedios)
# Comparación con valores teóricos
cat("Media empírica:", mean(promedios), "\n")
cat("Varianza empírica:", var(promedios), " (teórica:", sigma_teo^2, ")\n")
X <- rpois(2000, lambda = 3.5)
Y <- rpois(2000, lambda = 2.8)
Suma <- X+Y
Suma_teorica <- rpois(2000, lambda = 6.3)
ejer_pois <- tibble(valor = Suma, Tipo = "Suma")
ejer_pois_2 <- tibble(valor = Suma_teorica, Tipo = "Suma Teórica")
ejer_pois_total <- bind_rows(ejer_pois, ejer_pois_2)
ggplot(, aes(x = x)) +
geom_histogram(aes(X),bins = 10)
set.seed(123)
# Parámetros
lambda1 <- 3.5
lambda2 <- 2.8
n_sim <- 10000
# a) Generar muestras y calcular la suma
X1 <- rpois(n_sim, lambda1)
X2 <- rpois(n_sim, lambda2)
Suma_X <- X1 + X2
# Estadísticos empíricos
mean_Suma <- mean(Suma_X)
var_Suma <- var(Suma_X)
cat("Media empírica de la suma:", mean_Suma, "\n")
cat("Varianza empírica de la suma:", var_Suma, "\n")
# b) Comparar con Poisson(6.3) directa
Suma_Poisson <- rpois(n_sim, lambda1 + lambda2)
mean_Pois <- mean(Suma_Poisson)
var_Pois <- var(Suma_Poisson)
cat("Media Poisson(6.3) directa:", mean_Pois, "\n")
cat("Varianza Poisson(6.3) directa:", var_Pois, "\n")
# Gráfico comparativo
hist(Suma_X, breaks = 0:max(Suma_X), freq = FALSE, col = "skyblue", border="white",
main = "Suma X1+X2 vs Poisson(6.3)", xlab = "Valor")
lines(0:max(Suma_X), dpois(0:max(Suma_X), lambda1+lambda2), type = "b", col = "red", lwd = 2, pch=19)
legend("topright", legend = c("Simulación X1+X2","Poisson teórica"), col = c("skyblue","red"),
lwd=c(NA,2), pch=c(NA,19), bty="n")
lambda3 <- 1.2
lambda4 <- 0.8
# Generar 4 Poisson independientes
X3 <- rpois(n_sim, lambda3)
X4 <- rpois(n_sim, lambda4)
Suma_4 <- X1 + X2 + X3 + X4
# Estadísticos empíricos
mean_Suma4 <- mean(Suma_4)
var_Suma4 <- var(Suma_4)
cat("Media empírica suma 4 Poisson:", mean_Suma4, "\n")
cat("Varianza empírica suma 4 Poisson:", var_Suma4, "\n")
# Comparación con Poisson teórica
lambda_total <- lambda1 + lambda2 + lambda3 + lambda4
Suma4_Poisson <- rpois(n_sim, lambda_total)
mean_Pois4 <- mean(Suma4_Poisson)
var_Pois4 <- var(Suma4_Poisson)
cat("Media Poisson(8.3):", mean_Pois4, "\n")
cat("Varianza Poisson(8.3):", var_Pois4, "\n")
# Gráfico
hist(Suma_4, breaks=0:max(Suma_4), freq=FALSE, col="lightgreen", border="white",
main="Suma de 4 Poisson vs Poisson(8.3)", xlab="Valor")
lines(0:max(Suma_4), dpois(0:max(Suma_4), lambda_total), type="b", col="red", lwd=2, pch=19)
legend("topright", legend=c("Simulación suma 4 Poisson","Poisson teórica"), col=c("lightgreen","red"),
lwd=c(NA,2), pch=c(NA,19), bty="n")
lambda <- 15
capacidad <- 25
# a) Probabilidad de degradación
prob_degrad <- 1 - ppois(capacidad, lambda)
cat("Probabilidad de degradación (cap 25):", prob_degrad, "\n")
# b) Probabilidad con capacidad duplicada
capacidad2 <- 50
prob_degrad2 <- 1 - ppois(capacidad2, lambda)
cat("Probabilidad de degradación (cap 50):", prob_degrad2, "\n")
# c) Capacidad óptima para P(degradación)<0.01
cap_optima <- qpois(0.99, lambda)
cat("Capacidad óptima:", cap_optima, "\n")
# d) Simulación de 1 hora
set.seed(123)
n_minutos <- 60
visitantes <- rpois(n_minutos, lambda)
porc_degrad <- sum(visitantes > capacidad) / n_minutos * 100
cat("Porcentaje de minutos con degradación:", round(porc_degrad,4), "%\n")
lambda <- 8
inventario <- 12
prob_sin_stock <- 1 - ppois(inventario, lambda)
prob_sin_stock
inventario_opt <- qpois(0.95, lambda)
inventario_opt
x_max <- 30
x_vals <- 0:x_max
px <- dpois(x_vals, lambda)
# Inventario = 12
I <- 12
exceso <- sum(pmax(I - x_vals, 0) * px)
falta <- sum(pmax(x_vals - I, 0) * px)
costo_total <- 2*exceso + 15*falta + 10*I
costo_total
inventarios <- 0:20
costos_totales <- numeric(length(inventarios))
for(i in inventarios){
exceso <- sum(pmax(i - x_vals, 0) * px)
falta <- sum(pmax(x_vals - i, 0) * px)
costos_totales[i+1] <- 2*exceso + 15*falta + 10*i
}
# Inventario óptimo
I_min <- inventarios[which.min(costos_totales)]
costo_min <- min(costos_totales)
cat("Inventario óptimo:", I_min, "\n")
cat("Costo total mínimo esperado:", round(costo_min,2), "\n")
# Gráfico de costo vs inventario
plot(inventarios, costos_totales, type="b", pch=19, col="blue",
xlab="Inventario", ylab="Costo total esperado",
main="Optimización de inventario")
abline(v=I_min, col="red", lty=2)
#| label: setup
#| include: false
library(tidyverse)
library(kableExtra)
library(gridExtra)
# Parámetros
n <- 10
p <- 0.02
# a) Probabilidad de pieza no defectuosa
q <- 1 - p
q
# b) Media y varianza
mu <- n * p
sigma2 <- n * p * (1-p)
mu
sigma2
# c) Probabilidad de exactamente 2 defectuosas
dbinom(2, size = n, prob = p)
# Parámetros
p <- 1/4
# a) Modelado Bernoulli
# X ~ Bernoulli(p)
# b) Probabilidades
prob_acierto <- p
prob_fallo <- 1 - p
prob_acierto
prob_fallo
# c) Estadísticos
mu <- p
varianza <- p * (1 - p)
desviacion <- sqrt(varianza)
mu
varianza
desviacion
n <- 15
p <- 0.5
dbinom(8, size = n, prob = p)
1 - pbinom(11, size = n, prob = p)  # P(X >= 12)
mu <- n * p
varianza <- n * p * (1-p)
desviacion <- sqrt(varianza)
mu
varianza
desviacion
n <- 20
p <- 0.85
# Probabilidad de exactamente 18 curados
dbinom(18, size = n, prob = p)
# Probabilidad de 15 a 19 curados
sum(dbinom(15:19, size = n, prob = p))
# Alternativa
pbinom(19, n, p) - pbinom(14, n, p)
# Media esperada
n * p
set.seed(123)
# Parámetros
n <- 10
m <- 15
p <- 0.3
n_sim <- 10000
# Simulación
X <- rbinom(n_sim, n, p)
Y <- rbinom(n_sim, m, p)
Z <- X + Y
# Estadísticos empíricos
mean(Z)
var(Z)
# Comparación con Binomial(n+m, p)
mean_theo <- (n + m) * p
var_theo <- (n + m) * p * (1-p)
cat("Media empírica:", mean(Z), "Media teórica:", mean_theo, "\n")
cat("Varianza empírica:", var(Z), "Varianza teórica:", var_theo, "\n")
# Histograma comparativo
hist(Z, breaks = seq(min(Z)-0.5, max(Z)+0.5, 1), probability = TRUE,
col="lightblue", main="Suma de Binomiales vs Binomial teórica", xlab="Z = X + Y")
lines(0:(n+m), dbinom(0:(n+m), n+m, p), type="b", col="red", lwd=2, pch=19)
legend("topright", legend=c("Simulación", "Binomial teórica"), col=c("lightblue","red"),
lwd=c(NA,2), pch=c(NA,19), bty="n")
# =======================================================
# CAPÍTULO: Distribución Hipergeométrica - R
# =======================================================
# --- 1. Parámetros de ejemplo ---
N <- 20    # Tamaño población
K <- 7     # Número de éxitos en población
n <- 5     # Tamaño muestra
cat("Parámetros:\n")
cat("N =", N, "K =", K, "n =", n, "\n\n")
# =======================================================
# 2. Función de probabilidad (PMF)
# =======================================================
k <- 3  # Número de éxitos deseado
prob_k <- dhyper(k, K, N-K, n)
cat("Probabilidad de exactamente", k, "éxitos:", prob_k, "\n\n")
# =======================================================
# 3. Probabilidades acumuladas
# =======================================================
# P(X <= k)
prob_menor_igual <- phyper(k, K, N-K, n)
cat("Probabilidad de X <=", k, ":", prob_menor_igual, "\n")
# P(X >= k) = 1 - P(X <= k-1)
prob_mayor_igual <- 1 - phyper(k-1, K, N-K, n)
cat("Probabilidad de X >=", k, ":", prob_mayor_igual, "\n\n")
# =======================================================
# 4. Media y varianza
# =======================================================
mu <- n * K / N
varianza <- n * K / N * (N-K)/N * (N-n)/(N-1)
sigma <- sqrt(varianza)
cat("Media:", mu, "Varianza:", varianza, "Desviación estándar:", sigma, "\n\n")
# =======================================================
# 5. Simulación
# =======================================================
set.seed(123)
n_sim <- 10000
sim <- rhyper(n_sim, K, N-K, n)
# Frecuencias empíricas
freq_emp <- table(sim)/n_sim
cat("Frecuencias empíricas de la simulación:\n")
print(freq_emp)
# Histograma de simulación
barplot(freq_emp, col="lightblue", main="Distribución Hipergeométrica simulada",
xlab="Número de éxitos", ylab="Frecuencia relativa")
# =======================================================
# 6. Comparación con Binomial aproximada
# =======================================================
p_bin <- K / N
pmf_binom <- dbinom(0:n, n, p_bin)
# Superponer binomial
points(0:n, pmf_binom, col="red", pch=19)
lines(0:n, pmf_binom, col="red", lwd=2)
legend("topright", legend=c("Simulación Hipergeométrica","Binomial aproximada"),
col=c("lightblue","red"), lwd=c(NA,2), pch=c(NA,19), bty="n")
# =======================================================
# 7. Ejemplo avanzado: productos defectuosos
# =======================================================
N2 <- 50  # tamaño lote
K2 <- 10  # defectuosos
n2 <- 8   # inspeccionados
# Probabilidad de exactamente 2 defectuosos
prob2 <- dhyper(2, K2, N2-K2, n2)
# Media y desviación estándar
mu2 <- n2*K2/N2
sigma2 <- sqrt(n2*K2/N2 * (N2-K2)/N2 * (N2-n2)/(N2-1))
cat("\nEjemplo: Productos defectuosos\n")
cat("Probabilidad de exactamente 2 defectuosos:", prob2, "\n")
cat("Media:", mu2, "Desviación estándar:", sigma2, "\n")
